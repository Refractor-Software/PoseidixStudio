#once

; Change stuff here (todo: allow command line to change this)

.HostArch       = 'x64'
.BuildArch      = 'x64'
.CxxStandard    = '20'

; Internal details

#if __BUILD_DEBUG__
    .BuildVer = 'debug'
#else
    .BuildVer = 'dist'
#endif

#if exists(VULKAN_SDK)
    #import VULKAN_SDK
#else
    Error('Missing required envar "VULKAN_SDK"')
#endif

.VkBasePath = '$VULKAN_SDK$'

.VkIncPath  = '$VkBasePath$\Include'
.VkLibPath  = '$VkBasePath$\Lib'
.VkBinPath  = '$VkBasePath$\Bin'

#if __WINDOWS__
    .BuildPlat  = 'win32'
    .LibExt     = 'lib'
    .ObjExt     = 'obj'
    .AppExt     = 'exe'
#endif ; __WINDOWS__

#if __OSX__
    .BuildPlat  = 'macOS'
#endif ; __OSX__

#if __LINUX__
    .BuildPlat  = 'linux'
    .LibExt     = 'a'
    .ObjExt     = 'o'
#endif ; __LINUX__

; all packages (libraries/programs) follow this template
.PkgBin = 'bin\$BuildVer$\$BuildPlat$\$BuildArch$'
.PkgObj = '$PkgBin$\intermediate'
.PkgInc = 'inc'
.PkgSrc = 'src'

; we use .cxx around here
.CompilerInputPattern = '*.cxx'

; compiler setup for windows (msvc)
#if __WINDOWS__
    #if exists(VsPath)
        #import VsPath
    #else
        Error('Missing required envar "VsPath"')
    #endif ; exists(VsPath)

    #if exists(VsVer)
        #import VsVer
    #else
        Error('Missing required envar "VsVer"')
    #endif ; exists(VsVer)

    #if exists(WinSdkPath)
        #import WinSdkPath
    #else
        Error('Missing required envar "WinSdkPath"')
    #endif ; exists(WinSdkPath)

    #if exists(WinSdkVer)
        #import WinSdkVer
    #else
        Error('Missing required envar "WinSdkVer"')
    #endif ; exists(WinSdkVer)

    .VsBasePath     = '$VsPath$\VC\Tools\MSVC\$VsVer$'
    .VsLibBasePath  = '$VsBasePath$\lib'

    .VsBinPath      = '$VsBasePath$\bin\Host$HostArch$\$BuildArch$'
    .VsLibPath      = '$VsLibBasePath$\$BuildArch$'
    .VsLibOCPath    = '$VsLibBasePath$\onecore\$BuildArch$'
    .VsIncPath      = '$VsBasePath$\include'

    .WinSdkIncBase  = '$WinSdkPath$\Include\$WinSdkVer$'
    .WinSdkLibBase  = '$WinSdkPath$\Lib\$WinSdkVer$'

    .WinSdkIncUcrt  = '$WinSdkIncBase$\ucrt'
    .WinSdkIncUm    = '$WinSdkIncBase$\um'
    .WinSdkIncShr   = '$WinSdkIncBase$\shared'
    .WinSdkIncCRT   = '$WinSdkIncBase$\winrt'
    .WinSdkIncCppRT = '$WinSdkIncBase$\cppwinrt\winrt'

    .WinSdkLibUcrt  = '$WinSdkLibBase$\ucrt\$BuildArch$'
    .WinSdkLibUm    = '$WinSdkLibBase$\um\$BuildArch$'
    .WinSdkLibUcrtE = '$WinSdkLibBase$\ucrt-enclave\$BuildArch$'

    .CmpFlags       = ' /nologo'		                    ; No compiler spam
                    + ' /c %1'				                ; Only compile, don't link
                    + ' /Fo"%2"'		                    ; Output file
                    + ' /O2'                                ; Optimize for speed over size
                    + ' /W3'				                ; Warning level 3 (4 is too pedantic)
                    + ' /WX'				                ; Warnings are errors
                    + ' /std:c++$CxxStandard$'              ; Sets the C++ standard
                    + ' /I"$VkIncPath$"'                    ; Vulkan include path
                    + ' /I"$VsIncPath$"'                    ; libstdc++ include path
                    + ' /I"$WinSdkIncUm$"'                  ; Windows SDK include paths (UM)
                    + ' /I"$WinSdkIncUcrt$"'                ; Windows SDK include paths (UCRT)
                    + ' /EHsc'                              ; Exception stack unwinding
                    + ' /Qspectre'                          ; Disable spectre mitigations
    #if __BUILD_DEBUG__
                    + ' /Z7'				                ; Debugging (.pdb)
                    + ' /MTd'                               ; Multi-threaded static lib (debug)
    #else
                    + ' /MT'                                ; Multi-threaded static lib (dist)
                    + ' /DNDEBUG'                           ; Defines the no-debug macro
    #endif ; __BUILD_DEBUG

    .Librarian      = '$VsBinPath$\lib.exe'
    .Linker         = '$VsBinPath$\link.exe'

    .LibPaths       = ' /libpath:"$VsLibPath$"'
                    + ' /libpath:"$VsLibOCPath$"'
                    + ' /libpath:"$WinSdkLibUcrt$"'
                    + ' /libpath:"$WinSdkLibUm$"'
                    + ' /libpath:"$WinSdkLibUcrtE$"'
                    + ' /libpath:"$VkLibPath$"'

#endif ; __WINDOWS__

Compiler( 'Platform-Compiler' )
{
#if __WINDOWS__
    .Executable     =   '$VsBinPath$\cl.exe'
    .ExtraFiles     =   {
                        '$VsBinPath$\c1.dll'
                        '$VsBinPath$\c1xx.dll',
                        '$VsBinPath$\c2.dll',
                        '$VsBinPath$\atlprov.dll',
                        '$VsBinPath$\msobj140.dll',
                        '$VsBinPath$\mspdb140.dll',
                        '$VsBinPath$\mspdbcore.dll',
                        '$VsBinPath$\mspdbsrv.exe',
                        '$VsBinPath$\mspft140.dll',
                        '$VsBinPath$\msvcp140.dll',
                        '$VsBinPath$\msvcp140_atomic_wait.dll',
                        '$VsBinPath$\tbbmalloc.dll',
                        '$VsBinPath$\vcruntime140.dll',
                        '$VsBinPath$\vcruntime140_1.dll',
                        '$VsBinPath$\1033\clui.dll',
                        '$VsBinPath$\1033\mspft140ui.dll'
                        }
#endif ; __WINDOWS__
}

.Compiler           = 'Platform-Compiler'

.LibrarianOptions   = ' /nologo'
                    + ' /out:"%2"'
                    + ' "%1"'
                    + ' $LibPaths$'

.LinkerOptions      = ' /nologo'
                    + ' /out:"%2"'
                    + ' "%1"'
                    + ' /wx'
                    + ' $LibPaths$'

.CommonLibBase      = 'Code\CommonLib'
.GameEditorBase     = 'Code\GameEngine\Editor'

Library( 'CommonLib' )
{
    .CompilerOptions    = .CmpFlags

    .CompilerInputPath  = '$CommonLibBase$\$PkgSrc$'
    .CompilerOutputPath = '$CommonLibBase$\$PkgObj$'

    .CompilerOptions    + ' /I"$CommonLibBase$\$PkgInc$"'   ; include path

    .LibrarianOptions   + ' kernel32.lib'
                        + ' vulkan-1.lib'

    .LibrarianOutput    = '$CommonLibBase$\$PkgBin$\CommonLib-$BuildVer$.$LibExt$'
}

ObjectList( 'GameEditor-Lib' )
{
    .CompilerOptions        = .CmpFlags

    .CompilerInputPath      = '$GameEditorBase$\$PkgSrc$'
    .CompilerOutputPath     = '$GameEditorBase$\$PkgObj$'

    .CompilerOptions        + ' /I"$GameEditorBase$\$PkgInc$"'  ; editor include
                            + ' /I"$CommonLibBase$\$PkgInc$"'   ; commonlib include

    .PreBuildDependencies   = 'CommonLib-$BuildVer$.$LibExt$'
}

Executable( 'GameEditor' )
{
    .GameEditorBase     = 'Code\GameEngine\Editor'

    .Libraries          = 'GameEditor-Lib'

    .LinkerOutput       = '$GameEditorBase$\$PkgBin$\GameEditor-$BuildVer$.$AppExt$'
    .LinkerOptions      + ' /libpath:"$CommonLibBase$\$PkgBin$"'  ; depends on commonlib
                        + ' CommonLib-$BuildVer$.$LibExt$'
    #if __BUILD_DEBUG__
                        + ' /debug'
    #endif ; __BUILD_DEBUG__
}